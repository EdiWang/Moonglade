//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
//
//     Produced by Entity Framework Visual Editor v4.2.5.1
//     Source:                    https://github.com/msawczyn/EFDesigner
//     Visual Studio Marketplace: https://marketplace.visualstudio.com/items?itemName=michaelsawczyn.EFDesigner
//     Documentation:             https://msawczyn.github.io/EFDesigner/
//     License (MIT):             https://github.com/msawczyn/EFDesigner/blob/master/LICENSE
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Runtime.CompilerServices;

namespace Moonglade.Data
{
   /// <summary>
   /// Table for my certificates
   /// </summary>
   [System.ComponentModel.Description("Table for my certificates")]
   public partial class CertificateEntity
   {
      partial void Init();

      /// <summary>
      /// Default constructor. Protected due to required properties, but present because EF needs it.
      /// </summary>
      protected CertificateEntity()
      {
         Init();
      }

      /// <summary>
      /// Replaces default constructor, since it's protected. Caller assumes responsibility for setting all required values before saving.
      /// </summary>
      public static CertificateEntity CreateCertificateEntityUnsafe()
      {
         return new CertificateEntity();
      }

      /// <summary>
      /// Public constructor with required data
      /// </summary>
      /// <param name="provider">The issuer of the certificate</param>
      /// <param name="certificatetite">Title of the certificate</param>
      /// <param name="year">Year of issueing</param>
      /// <param name="content">Some details of the content</param>
      /// <param name="link">Link to the certificate if available</param>
      /// <param name="image">Link to a Image from the certificate</param>
      /// <param name="landscape">Is it Landscape? This entry is used for formatting the image</param>
      public CertificateEntity(string provider, string certificatetite, string year, string content, string link, string image, bool landscape)
      {
         if (string.IsNullOrEmpty(provider)) throw new ArgumentNullException(nameof(provider));
         this.Provider = provider;

         if (string.IsNullOrEmpty(certificatetite)) throw new ArgumentNullException(nameof(certificatetite));
         this.CertificateTite = certificatetite;

         if (string.IsNullOrEmpty(year)) throw new ArgumentNullException(nameof(year));
         this.Year = year;

         if (string.IsNullOrEmpty(content)) throw new ArgumentNullException(nameof(content));
         this.Content = content;

         if (string.IsNullOrEmpty(link)) throw new ArgumentNullException(nameof(link));
         this.Link = link;

         if (string.IsNullOrEmpty(image)) throw new ArgumentNullException(nameof(image));
         this.Image = image;

         this.Landscape = landscape;

         Init();
      }

      /// <summary>
      /// Static create function (for use in LINQ queries, etc.)
      /// </summary>
      /// <param name="provider">The issuer of the certificate</param>
      /// <param name="certificatetite">Title of the certificate</param>
      /// <param name="year">Year of issueing</param>
      /// <param name="content">Some details of the content</param>
      /// <param name="link">Link to the certificate if available</param>
      /// <param name="image">Link to a Image from the certificate</param>
      /// <param name="landscape">Is it Landscape? This entry is used for formatting the image</param>
      public static CertificateEntity Create(string provider, string certificatetite, string year, string content, string link, string image, bool landscape)
      {
         return new CertificateEntity(provider, certificatetite, year, content, link, image, landscape);
      }

      /*************************************************************************
       * Properties
       *************************************************************************/

      /// <summary>
      /// Required, Max length = 150
      /// Title of the certificate
      /// </summary>
      [Required]
      [MaxLength(150)]
      [StringLength(150)]
      [System.ComponentModel.Description("Title of the certificate")]
      public string CertificateTite { get; set; }

      /// <summary>
      /// Required, Max length = 300
      /// Some details of the content
      /// </summary>
      [Required]
      [MaxLength(300)]
      [StringLength(300)]
      [System.ComponentModel.Description("Some details of the content")]
      public string Content { get; set; }

      /// <summary>
      /// Identity, Required
      /// Identifier automatic Increased
      /// </summary>
      [Key]
      [Required]
      [System.ComponentModel.Description("Identifier automatic Increased")]
      public int Id { get; set; }

      /// <summary>
      /// Required, Max length = 300
      /// Link to a Image from the certificate
      /// </summary>
      [Required]
      [MaxLength(300)]
      [StringLength(300)]
      [System.ComponentModel.Description("Link to a Image from the certificate")]
      public string Image { get; set; }

      /// <summary>
      /// Required
      /// Is it Landscape? This entry is used for formatting the image
      /// </summary>
      [Required]
      [System.ComponentModel.Description("Is it Landscape? This entry is used for formatting the image")]
      public bool Landscape { get; set; }

      /// <summary>
      /// Defined Language
      /// </summary>
      [System.ComponentModel.Description("Defined Language")]
      public global::Moonglade.Data.Enum.LanguageEnum? Language { get; set; }

      /// <summary>
      /// Required, Max length = 300
      /// Link to the certificate if available
      /// </summary>
      [Required]
      [MaxLength(300)]
      [StringLength(300)]
      [System.ComponentModel.Description("Link to the certificate if available")]
      public string Link { get; set; }

      /// <summary>
      /// Required, Max length = 150
      /// The issuer of the certificate
      /// </summary>
      [Required]
      [MaxLength(150)]
      [StringLength(150)]
      [System.ComponentModel.Description("The issuer of the certificate")]
      public string Provider { get; set; }

      /// <summary>
      /// Required, Max length = 50
      /// Year of issueing
      /// </summary>
      [Required]
      [MaxLength(50)]
      [StringLength(50)]
      [System.ComponentModel.Description("Year of issueing")]
      public string Year { get; set; }

   }
}

