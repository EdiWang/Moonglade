//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
//
//     Produced by Entity Framework Visual Editor v4.2.5.1
//     Source:                    https://github.com/msawczyn/EFDesigner
//     Visual Studio Marketplace: https://marketplace.visualstudio.com/items?itemName=michaelsawczyn.EFDesigner
//     Documentation:             https://msawczyn.github.io/EFDesigner/
//     License (MIT):             https://github.com/msawczyn/EFDesigner/blob/master/LICENSE
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Runtime.CompilerServices;

namespace Moonglade.Data
{
   /// <summary>
   /// Table with my Projects
   /// </summary>
   [System.ComponentModel.Description("Table with my Projects")]
   public partial class ProjectEntity
   {
      partial void Init();

      /// <summary>
      /// Default constructor. Protected due to required properties, but present because EF needs it.
      /// </summary>
      protected ProjectEntity()
      {
         Init();
      }

      /// <summary>
      /// Replaces default constructor, since it's protected. Caller assumes responsibility for setting all required values before saving.
      /// </summary>
      public static ProjectEntity CreateProjectEntityUnsafe()
      {
         return new ProjectEntity();
      }

      /// <summary>
      /// Public constructor with required data
      /// </summary>
      /// <param name="portfoliolink"></param>
      /// <param name="projectlink"></param>
      /// <param name="projectname"></param>
      /// <param name="projectsummary"></param>
      /// <param name="client"></param>
      /// <param name="completion"></param>
      /// <param name="projecttype"></param>
      /// <param name="authors"></param>
      /// <param name="language"></param>
      public ProjectEntity(string portfoliolink, string projectlink, string projectname, string projectsummary, string client, DateTime completion, string projecttype, string authors, global::Moonglade.Data.Enum.LanguageEnum language)
      {
         if (string.IsNullOrEmpty(portfoliolink)) throw new ArgumentNullException(nameof(portfoliolink));
         this.PortfolioLink = portfoliolink;

         if (string.IsNullOrEmpty(projectlink)) throw new ArgumentNullException(nameof(projectlink));
         this.ProjectLink = projectlink;

         if (string.IsNullOrEmpty(projectname)) throw new ArgumentNullException(nameof(projectname));
         this.ProjectName = projectname;

         if (string.IsNullOrEmpty(projectsummary)) throw new ArgumentNullException(nameof(projectsummary));
         this.ProjectSummary = projectsummary;

         if (string.IsNullOrEmpty(client)) throw new ArgumentNullException(nameof(client));
         this.Client = client;

         this.Completion = completion;

         if (string.IsNullOrEmpty(projecttype)) throw new ArgumentNullException(nameof(projecttype));
         this.ProjectType = projecttype;

         if (string.IsNullOrEmpty(authors)) throw new ArgumentNullException(nameof(authors));
         this.Authors = authors;

         this.Language = language;

         Init();
      }

      /// <summary>
      /// Static create function (for use in LINQ queries, etc.)
      /// </summary>
      /// <param name="portfoliolink"></param>
      /// <param name="projectlink"></param>
      /// <param name="projectname"></param>
      /// <param name="projectsummary"></param>
      /// <param name="client"></param>
      /// <param name="completion"></param>
      /// <param name="projecttype"></param>
      /// <param name="authors"></param>
      /// <param name="language"></param>
      public static ProjectEntity Create(string portfoliolink, string projectlink, string projectname, string projectsummary, string client, DateTime completion, string projecttype, string authors, global::Moonglade.Data.Enum.LanguageEnum language)
      {
         return new ProjectEntity(portfoliolink, projectlink, projectname, projectsummary, client, completion, projecttype, authors, language);
      }

      /*************************************************************************
       * Properties
       *************************************************************************/

      /// <summary>
      /// Required, Max length = 50
      /// </summary>
      [Required]
      [MaxLength(50)]
      [StringLength(50)]
      public string Authors { get; set; }

      /// <summary>
      /// Required, Max length = 50
      /// </summary>
      [Required]
      [MaxLength(50)]
      [StringLength(50)]
      public string Client { get; set; }

      /// <summary>
      /// Required, HasColumnName(&quot;datetime&quot;)
      /// </summary>
      [Required]
      public DateTime Completion { get; set; }

      /// <summary>
      /// Identity, Required
      /// </summary>
      [Key]
      [Required]
      public int Id { get; set; }

      /// <summary>
      /// Required
      /// </summary>
      [Required]
      public global::Moonglade.Data.Enum.LanguageEnum Language { get; set; }

      /// <summary>
      /// Required, Max length = 150
      /// </summary>
      [Required]
      [MaxLength(150)]
      [StringLength(150)]
      public string PortfolioLink { get; set; }

      /// <summary>
      /// Required, Max length = 150
      /// </summary>
      [Required]
      [MaxLength(150)]
      [StringLength(150)]
      public string ProjectLink { get; set; }

      /// <summary>
      /// Required, Max length = 100
      /// </summary>
      [Required]
      [MaxLength(100)]
      [StringLength(100)]
      public string ProjectName { get; set; }

      /// <summary>
      /// Required, Max length = 200
      /// </summary>
      [Required]
      [MaxLength(200)]
      [StringLength(200)]
      public string ProjectSummary { get; set; }

      /// <summary>
      /// Required, Max length = 50
      /// </summary>
      [Required]
      [MaxLength(50)]
      [StringLength(50)]
      public string ProjectType { get; set; }

   }
}

